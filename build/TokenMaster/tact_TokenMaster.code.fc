#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_TokenMaster.headers.fc";
#include "tact_TokenMaster.stdlib.fc";
#include "tact_TokenMaster.storage.fc";

;;
;; Contract TokenMaster functions
;;

(int, int, slice, cell, int, int, int, int) $TokenMaster$_contract_init(slice $owner, cell $jetton_content) impure inline_ref {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied)) = (1000000000, true, null(), null(), 0, 0, true, 0);
    $self'owner = $owner;
    $self'jetton_content = $jetton_content;
    var ($init'code, $init'data) = $TokenWallet$_init_child(__tact_context_sys, $owner, my_address());
    slice $to = $global_contractAddress(($init'code, $init'data));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body_data_code($to, 0, 64, false, $InternalTransfer$_store_cell($InternalTransfer$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload(0, 1000000000, $self'owner, $owner, 0, $global_emptySlice())), $init'data, $init'code));
    return ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied);
}

((int, int, slice, cell, int, int, int, int), (int, int, slice, cell, cell)) $TokenMaster$_fun_get_jetton_data((int, int, slice, cell, int, int, int, int) $self) impure inline_ref {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied)) = $self;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied), $MasterData$_constructor_total_supply_mintable_owner_jetton_content_jetton_wallet_code($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $StateInit$_get_code($TokenWallet$_init_child(__tact_context_sys, $self'owner, my_address()))));
}

((int, int, slice, cell, int, int, int, int), slice) $TokenMaster$_fun_get_wallet_address((int, int, slice, cell, int, int, int, int) $self, slice $owner_address) impure inline_ref {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied)) = $self;
    var ($init'code, $init'data) = $TokenWallet$_init_child(__tact_context_sys, $owner_address, my_address());
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied), $global_contractAddress(($init'code, $init'data)));
}

((int, int, slice, cell, int, int, int, int), (int, int, slice, int, int, int, int)) $TokenMaster$_fun_tokenData((int, int, slice, cell, int, int, int, int) $self) impure inline_ref {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied)) = $self;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied), $TokenData$_constructor_total_supply_mintable_owner_commission_active_commissionCollectied_jettonsToStop($self'total_supply, $self'mintable, $self'owner, $self'commission, $self'activeCommission, $self'commissionCollectied, $self'jettonsToStop));
}

;;
;; Receivers of a Contract TokenMaster
;;

(((int, int, slice, cell, int, int, int, int)), ()) $TokenMaster$_internal_binary_ChangeContent((int, int, slice, cell, int, int, int, int) $self, (cell) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied) = $self;
    var ($msg'jetton_content) = $msg;
    throw_unless(35499, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $self'jetton_content = $msg'jetton_content;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied), ());
}

(((int, int, slice, cell, int, int, int, int)), ()) $TokenMaster$_internal_binary_ChangeOwner((int, int, slice, cell, int, int, int, int) $self, (slice) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied) = $self;
    var ($msg'owner) = $msg;
    throw_unless(35499, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $self'owner = $msg'owner;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied), ());
}

(((int, int, slice, cell, int, int, int, int)), ()) $TokenMaster$_internal_binary_ChangeCommission((int, int, slice, cell, int, int, int, int) $self, (int) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied) = $self;
    var ($msg'commission) = $msg;
    throw_unless(35499, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $self'commission = $msg'commission;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied), ());
}

(((int, int, slice, cell, int, int, int, int)), ()) $TokenMaster$_internal_binary_ChangeJettonsToStop((int, int, slice, cell, int, int, int, int) $self, (int) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied) = $self;
    var ($msg'amount) = $msg;
    throw_unless(35499, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $self'jettonsToStop = $msg'amount;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied), ());
}

(((int, int, slice, cell, int, int, int, int)), ()) $TokenMaster$_internal_binary_ActiveCommision((int, int, slice, cell, int, int, int, int) $self, (int) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied) = $self;
    var ($msg'active) = $msg;
    throw_unless(35499, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $self'activeCommission = $msg'active;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied), ());
}

(((int, int, slice, cell, int, int, int, int)), ()) $TokenMaster$_internal_binary_CollectCommission((int, int, slice, cell, int, int, int, int) $self, (int) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied) = $self;
    var ($msg'query_id) = $msg;
    throw_unless(35499, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    throw_unless(2179, ($self'commissionCollectied > 0));
    var ($init'code, $init'data) = $TokenWallet$_init_child(__tact_context_sys, $self'owner, my_address());
    slice $to = $global_contractAddress(($init'code, $init'data));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body_data_code($to, 0, 64, false, $InternalTransfer$_store_cell($InternalTransfer$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload(111, $self'commissionCollectied, $self'owner, $self'owner, 0, $global_emptySlice())), $init'data, $init'code));
    $self'commissionCollectied = 0;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied), ());
}

(((int, int, slice, cell, int, int, int, int)), ()) $TokenMaster$_internal_binary_CheckTransfer((int, int, slice, cell, int, int, int, int) $self, (int, slice, slice) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied) = $self;
    var ($msg'amount, $msg'owner, $msg'from) = $msg;
    var ($init'code, $init'data) = $TokenWallet$_init_child(__tact_context_sys, $msg'owner, my_address());
    slice $from = $global_contractAddress(($init'code, $init'data));
    int $commission = 0;
    if ($self'activeCommission) {
        $commission = (($msg'amount * $self'commission) / 1000);
    }
    $self'commissionCollectied = $self'commissionCollectied + $commission;
    throw_unless(61739, ( __tact_slice_eq_bits($from, __tact_context_get_sender()) ));
    if ($self'mintable) {
        throw_unless(17062, ($msg'amount == 1000000000));
        $self'total_supply = ($self'total_supply + 3000000000);
    }
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($msg'from, 0, 64, true, $SendMint$_store_cell($SendMint$_constructor_mintable_amount_commission_to($self'mintable, $msg'amount, $commission, $msg'owner))));
    if (( (($self'jettonsToStop > 0)) ? (($self'total_supply >= $self'jettonsToStop)) : (false) )) {
        $self'mintable = false;
    }
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied), ());
}

(((int, int, slice, cell, int, int, int, int)), ()) $TokenMaster$_internal_binary_Transfer((int, int, slice, cell, int, int, int, int) $self, (int, int, slice, slice, cell, int, slice) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied) = $self;
    var ($msg'query_id, $msg'amount, $msg'destination, $msg'response_destination, $msg'custom_payload, $msg'forward_ton_amount, $msg'forward_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(35499, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    throw_unless(49345, $self'mintable);
    throw_unless(51724, ((($Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) + 10000000) + $msg'forward_ton_amount) < $ctx'value));
    $self'total_supply = ($self'total_supply + $msg'amount);
    var ($init'code, $init'data) = $TokenWallet$_init_child(__tact_context_sys, $msg'destination, my_address());
    slice $to = $global_contractAddress(($init'code, $init'data));
    if (( (($self'jettonsToStop > 0)) ? (($self'total_supply >= $self'jettonsToStop)) : (false) )) {
        $self'mintable = false;
    }
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body_data_code($to, 0, 64, false, $InternalTransfer$_store_cell($InternalTransfer$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload($msg'query_id, $msg'amount, $self'owner, $msg'response_destination, $msg'forward_ton_amount, $msg'forward_payload)), $init'data, $init'code));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied), ());
}

(((int, int, slice, cell, int, int, int, int)), ()) $TokenMaster$_internal_binary_ProvideWalletAddress((int, int, slice, cell, int, int, int, int) $self, (int, slice, int) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied) = $self;
    var ($msg'query_id, $msg'owner_address, $msg'include_address) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    slice $wallet = $global_contractAddress($TokenWallet$_init_child(__tact_context_sys, $msg'owner_address, my_address()));
    slice $owner_address = null();
    if ($msg'include_address) {
        $owner_address = $msg'owner_address;
    }
    $global_send($SendParameters$_constructor_to_value_mode_body($ctx'sender, 0, 64, $TakeWalletAddress$_store_cell($TakeWalletAddress$_constructor_query_id_wallet_address_owner_address($msg'query_id, $wallet, $owner_address))));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied), ());
}

(((int, int, slice, cell, int, int, int, int)), ()) $TokenMaster$_internal_binary_StopMint((int, int, slice, cell, int, int, int, int) $self, (int) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied) = $self;
    var ($msg'mintable) = $msg;
    throw_unless(35499, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $self'mintable = $msg'mintable;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied), ());
}

(((int, int, slice, cell, int, int, int, int)), ()) $TokenMaster$_internal_binary_BurnNotification((int, int, slice, cell, int, int, int, int) $self, (int, int, slice, slice) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied) = $self;
    var ($msg'query_id, $msg'amount, $msg'sender, $msg'response_destination) = $msg;
    var ($init'code, $init'data) = $TokenWallet$_init_child(__tact_context_sys, $msg'sender, my_address());
    throw_unless(4429, ( __tact_slice_eq_bits(__tact_context_get_sender(), $global_contractAddress(($init'code, $init'data))) ));
    $self'total_supply = ($self'total_supply - $msg'amount);
    $global_send($SendParameters$_constructor_to_value_mode_body($msg'response_destination, 0, 64, $Excesses$_store_cell($Excesses$_constructor_query_id($msg'query_id))));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied), ());
}

(((int, int, slice, cell, int, int, int, int)), ()) $TokenMaster$_internal_binary_Deploy((int, int, slice, cell, int, int, int, int) $self, (int) $deploy) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied)~$TokenMaster$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'jettonsToStop, $self'commission, $self'activeCommission, $self'commissionCollectied), ());
}

;;
;; Get methods of a Contract TokenMaster
;;

_ %get_jetton_data() method_id(106029) {
    var self = $TokenMaster$_contract_load();
    var res = self~$TokenMaster$_fun_get_jetton_data();
    return $MasterData$_to_external(res);
}

_ %get_wallet_address(slice $$owner_address) method_id(103289) {
    slice $owner_address = __tact_verify_address($$owner_address);
    var self = $TokenMaster$_contract_load();
    var res = self~$TokenMaster$_fun_get_wallet_address($owner_address);
    return res;
}

_ %tokenData() method_id(123194) {
    var self = $TokenMaster$_contract_load();
    var res = self~$TokenMaster$_fun_tokenData();
    return $TokenData$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmZXHMsmPmyDEcnPtF51k585iP6CLhrSsrMC6eYkyN7BGj";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract TokenMaster
;;

((int, int, slice, cell, int, int, int, int), int) $TokenMaster$_contract_router_internal((int, int, slice, cell, int, int, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive ChangeContent message
    if (op == 274271986) {
        var msg = in_msg~$ChangeContent$_load();
        self~$TokenMaster$_internal_binary_ChangeContent(msg);
        return (self, true);
    }
    
    ;; Receive ChangeOwner message
    if (op == 2242002949) {
        var msg = in_msg~$ChangeOwner$_load();
        self~$TokenMaster$_internal_binary_ChangeOwner(msg);
        return (self, true);
    }
    
    ;; Receive ChangeCommission message
    if (op == 2384427940) {
        var msg = in_msg~$ChangeCommission$_load();
        self~$TokenMaster$_internal_binary_ChangeCommission(msg);
        return (self, true);
    }
    
    ;; Receive ChangeJettonsToStop message
    if (op == 1861010850) {
        var msg = in_msg~$ChangeJettonsToStop$_load();
        self~$TokenMaster$_internal_binary_ChangeJettonsToStop(msg);
        return (self, true);
    }
    
    ;; Receive ActiveCommision message
    if (op == 2359285885) {
        var msg = in_msg~$ActiveCommision$_load();
        self~$TokenMaster$_internal_binary_ActiveCommision(msg);
        return (self, true);
    }
    
    ;; Receive CollectCommission message
    if (op == 3793300544) {
        var msg = in_msg~$CollectCommission$_load();
        self~$TokenMaster$_internal_binary_CollectCommission(msg);
        return (self, true);
    }
    
    ;; Receive CheckTransfer message
    if (op == 1067188736) {
        var msg = in_msg~$CheckTransfer$_load();
        self~$TokenMaster$_internal_binary_CheckTransfer(msg);
        return (self, true);
    }
    
    ;; Receive Transfer message
    if (op == 260734629) {
        var msg = in_msg~$Transfer$_load();
        self~$TokenMaster$_internal_binary_Transfer(msg);
        return (self, true);
    }
    
    ;; Receive ProvideWalletAddress message
    if (op == 745978227) {
        var msg = in_msg~$ProvideWalletAddress$_load();
        self~$TokenMaster$_internal_binary_ProvideWalletAddress(msg);
        return (self, true);
    }
    
    ;; Receive StopMint message
    if (op == 1985816509) {
        var msg = in_msg~$StopMint$_load();
        self~$TokenMaster$_internal_binary_StopMint(msg);
        return (self, true);
    }
    
    ;; Receive BurnNotification message
    if (op == 2078119902) {
        var msg = in_msg~$BurnNotification$_load();
        self~$TokenMaster$_internal_binary_BurnNotification(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$TokenMaster$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $TokenMaster$_contract_load();
    
    ;; Handle operation
    int handled = self~$TokenMaster$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $TokenMaster$_contract_store(self);
}
